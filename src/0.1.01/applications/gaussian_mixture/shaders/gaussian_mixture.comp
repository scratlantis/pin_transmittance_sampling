#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../../framework/simplex.glsl"

#define MAX_RAY_DISTANCE 10000.0
#define MIN_RAY_DISTANCE 0.1

#define EPSILON 0.0001
#ifndef GAUSSIAN_COUNT
	#define GAUSSIAN_COUNT 10
#endif


layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

struct Cube
{
	mat4 modelMatrix;
	mat4 invModelMatrix;
};


struct PerFrameConstants
{
	vec4 camPos;

	mat4 viewMat;
	mat4 inverseViewMat;
	mat4 projectionMat;
	mat4 inverseProjectionMat;

	uint width;
	uint height;
	uint frameCounter;
	uint mousePosX;

	uint mousePosY;
	uint invertColors;
	uint placeholder3;
	uint placeholder4;

	Cube cube;
};


struct RaySegment
{
	vec3 origin;
	vec3 direction;
	float tMin;
	float tMax;

};

struct Gaussian
{
	vec3 mean;
	float variance;
};


layout(binding = 0) uniform PFC {PerFrameConstants pfc;};
layout(binding = 1, rgba32f) uniform image2D imageOffscreen;
layout(binding = 2) buffer GAUSSIAN_STORAGE_BUFFER {Gaussian gaussians[GAUSSIAN_COUNT];};
void getPoints(RaySegment seg, inout vec3 p1, inout vec3 p2)
{
	p1 = seg.origin + seg.direction * seg.tMin;
	p2 = seg.origin + seg.direction * seg.tMax;
}

void getRaySegment(inout RaySegment seg, vec3 p1, vec3 p2)
{
	seg.origin = p1;
	seg.direction = normalize(p2 - p1);
	seg.tMin = 0.0;
	seg.tMax = length(p2 - p1);
}

RaySegment transform(RaySegment seg, mat4 m)
{
	RaySegment outSeg = seg;
	outSeg.origin = (m * vec4(seg.origin, 1)).xyz;
	outSeg.direction = (m * vec4(seg.direction, 0)).xyz;
	float invScale = length(seg.direction / outSeg.direction);
	outSeg.tMin = seg.tMin * invScale;
	outSeg.tMax = seg.tMax * invScale;
	return outSeg;

}

bool intersectCube(inout RaySegment raySegOut, RaySegment raySegIn, Cube cube)
{
	RaySegment raySeg = transform(raySegIn, cube.invModelMatrix);
	if(abs(raySeg.direction.x) < EPSILON)
	{
		raySeg.direction.x = EPSILON;
	}
	if(abs(raySeg.direction.y) < EPSILON)
	{
		raySeg.direction.y = EPSILON;
	}
	if(abs(raySeg.direction.z) < EPSILON)
	{
		raySeg.direction.z = EPSILON;
	}
	vec3 invDir = 1.0 / raySeg.direction;
	vec3 c1 = -raySeg.origin*invDir;
	vec3 c2 = c1 + invDir; // (vec(1.0)-raySeg.origin)*invDir;

	float tmin = max(max(min(c1.x, c2.x), min(c1.y, c2.y)), min(c1.z, c2.z));
	float tmax = min(min(max(c1.x, c2.x), max(c1.y, c2.y)), max(c1.z, c2.z)); 

	if (tmax < 0 || tmin > tmax)
	{
		return false;
	}

	raySeg.tMin = tmin;
	raySeg.tMax = tmax;
	raySegOut = raySeg;
	return true;
}



//float gauss_cdf_approx_Eidous_Ananbeh(float z)
//{
//	double c1 = 1.5957764;
//	double c2 = 0.0726161;
//	double c3 = 0.00003318;
//	double c4 = 0.00021785;
//	double c5 = 0.00006293;
//	double c6 = 0.00000519;
//	float z3 = z * z * z;
//	float z6 = z3*z3;
//	float z7 = z6*z;
//	float z8 = z7*z;
//	float z9 = z8*z;
//	return 1.0 / (1.0 + exp(c1*z + c2*z3+c3*z6+c4*z7+c5*z8+c6*z9));
//}

//float eval_gaussian(double x, double mean, double variance)
//{
//	double c = 0.3989422804014337; // 1/sqrt(2*pi)
//	double a = (x - mean) / variance;
//	return (1.0/variance)*c*exp(-0.5 * a * a);
//}
//
//float evalTransmittanceGaussian(RaySegment raySegIn, Gaussian g)
//{
//	 double t = dot(raySegIn.direction, g.mean - raySegIn.origin);
//	 vec3 p = raySegIn.origin + t * raySegIn.direction;
//	 double d = length(p - g.mean);
//	 double f1 = eval_gaussian(d, 0.0, g.variance);
//	 return d;
//}


float eval_gaussian(float x, float mean, float variance)
{
	float c = 0.3989422804014337; // 1/sqrt(2*pi)
	float a = (x - mean) / variance;
	return (1.0/variance)*c*exp(-0.5 * a * a);
}

float evalTransmittanceGaussian(RaySegment raySegIn, Gaussian g)
{
	 float t = dot(raySegIn.direction, g.mean - raySegIn.origin);
	 vec3 p = raySegIn.origin + t * raySegIn.direction;
	 float d = length(p - g.mean);
	 float f1 = eval_gaussian(d, 0.0, g.variance);
	 return f1;
}

vec3 getRayDir(ivec2 pixel)
{
	vec2 pixel_center   =   vec2(pixel) + vec2(0.5);
    vec2 uv           = (pixel_center)/vec2(pfc.width, pfc.height);
    vec2 device_coord     = uv * 2.0 - 1.0;
	vec4 clipCoords = vec4(device_coord.x, device_coord.y, 1.0, 1.0);
    vec4 target         = pfc.inverseProjectionMat * clipCoords;
    vec4 direction      = pfc.inverseViewMat * target;
	return normalize(direction.xyz);
}

RaySegment getPrimaryRay(ivec2 pixel)
{
	RaySegment seg;
	seg.origin = pfc.camPos.xyz;
	seg.direction = getRayDir(pixel);
	seg.tMin = MIN_RAY_DISTANCE;
	seg.tMax = MAX_RAY_DISTANCE;
	return seg;
}

void main()
{
	uvec2 gID = gl_GlobalInvocationID.xy;
	if(gID.x >= pfc.width || gID.y >= pfc.height) return;
	ivec2 p = ivec2(gID);

	RaySegment primaryRay = getPrimaryRay(p);
	RaySegment cubeRaySegment;
	vec3 outColor = vec3(1.0);


	float transmittance = 1.0;
	for(int i = 0; i < GAUSSIAN_COUNT; i++)
	{
		float coef = clamp(1.0-evalTransmittanceGaussian(primaryRay, gaussians[i]), 0.0, 1.0);
		transmittance *= coef;
	}
	outColor = vec3(1.0,transmittance,transmittance);
	if(intersectCube(cubeRaySegment, primaryRay, pfc.cube))
	{
		float depth = cubeRaySegment.tMax-cubeRaySegment.tMin;
		float coef = exp(-depth);
		outColor.r *= coef;
	}
	imageStore(imageOffscreen, p, vec4(outColor,1.0));
}