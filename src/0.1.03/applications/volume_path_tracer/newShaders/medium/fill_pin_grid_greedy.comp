#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../random.glsl"
#include "pins_common.glsl"


layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(binding = 0) readonly buffer PINS {GLSLPin pins[];};
layout(binding = 1) writeonly buffer PIN_GRID {GLSLPinGridEntry grid[];};
struct PushStruct
{
	uint   pinCount;
	uint   pinCountPerGridCell;
	uint   gridSize;
};
layout(push_constant) uniform PC {PushStruct pc;};

void main()
{
	uvec3 gID = uvec3(gl_GlobalInvocationID.xyz);
	if (gID.x >= pc.gridSize || gID.y >= pc.gridSize || gID.z >= pc.gridSize)
	{
		return;
	}
	uint cellIdx = flatten(gID, pc.gridSize)*pc.pinCountPerGridCell;
	uint pinBaseIdx = hash(gID) % pc.pinCount;
	float scale = float(pc.gridSize);
	vec3 offset = -vec3(gID);


	uint pinsTried = 0;
	vec3 entry, exit;
	GLSLPinGridEntry gridEntry;
	for(uint i = 0; i < pc.pinCountPerGridCell; i++)
	{
		for(; pinsTried < pc.pinCount; pinsTried++)
		{
			gridEntry.idx = (pinBaseIdx + pinsTried) % pc.pinCount;
			gridEntry.pin = pins[gridEntry.idx];
			if(unitCubeIntersection(getPinOrigin(gridEntry.pin)*scale + offset, getPinDirection(gridEntry.pin), entry, exit))
			{
				break;
			}
		}
		grid[cellIdx + i] = gridEntry;
		pinsTried++;
	}
}