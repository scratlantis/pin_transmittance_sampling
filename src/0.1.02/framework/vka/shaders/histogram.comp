#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_atomic_float : enable

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

#ifndef BUCKETS
#define BUCKETS 256
#endif

#ifndef BUCKET_RANGE
#define BUCKET_RANGE 1.0f
#endif

struct Params
{
    ivec2 offset;
	uvec2 extent;
};
layout(binding = 0) uniform PARAMS {Params params;};
layout(binding = 1) buffer COUNTER_BUFFER {uint bucket[BUCKETS];};
layout(binding = 2) uniform sampler uSampler;
layout(binding = 3) uniform texture2D uTexture;
layout(binding = 4) buffer AVERAGE_BUFFER {float average;};
void main()
{
	uvec2 gID = gl_GlobalInvocationID.xy;
	if(gID.x >= params.extent.x || gID.y >= params.extent.y) return;
	ivec2 pixel = ivec2(gID) + params.offset;
	float val = texelFetch(sampler2D(uTexture, uSampler) , pixel, 0).r;
	val /= BUCKET_RANGE;
	float clampedVal = clamp(val, 0.0, 0.99999);
	uint bucketIndex = uint(clampedVal * float(BUCKETS));
	atomicAdd(bucket[bucketIndex], 1);
	if(val > BUCKET_RANGE)
	{
		float normalizationTerm = 1.0f / float(params.extent.x * params.extent.y);
		atomicAdd(average, (val-BUCKET_RANGE) * normalizationTerm);
	}
}