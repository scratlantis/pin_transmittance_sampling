#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../common.glsl"


layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(binding = 0) readonly buffer PINS {GLSLPin pins[];};
layout(binding = 1) writeonly buffer PIN_TRANSMITTANCE {float transmittance[];};
layout(binding = 2) writeonly buffer PIN_DENSITY_MASK {GLSLDensityMaskEntry pinDensityMask[];};
layout(binding = 3) uniform sampler3D volSmp;
struct PushStruct
{
	uint   pinCount;
	uint   perPinValueCount;
};
layout(push_constant) uniform PC {PushStruct pc;};

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if (gID >= pc.pinCount)
	{
		return;
	}
	GLSLPin pin = pins[gID];
	vec3 origin = getPinOrigin(pin);
	vec3 destination = getPinDestination(pin);
	vec3 direction = normalize(destination - origin);
	float pinLenght = length(destination - origin);
	float stepSize = pinLenght / float(pc.perPinValueCount);

	float densitySum = 0.0f;
	float maxDensity = 0.0f;
	for(uint i = 0; i < pc.perPinValueCount; i++)
	{
		vec3 samplePoint = origin + (stepSize * (0.5 + float(i))) * direction;
		float density = texture(volSmp, samplePoint).r;
		maxDensity = max(maxDensity, density);
		densitySum += density*stepSize;
		transmittance[gID * pc.perPinValueCount + i] = densitySum;//exp(-densitySum);
		//transmittance[gID * pc.perPinValueCount + i] = exp(-densitySum);
	}
	GLSLDensityMaskEntry entry;

	stepSize = pinLenght / float(32);
	float maxCollisionPropabillity = 1.0 - exp(-maxDensity*stepSize);
	entry.maxDensity = maxCollisionPropabillity;

	uint sampleMask = 0;
	for(uint i = 0; i < 32; i++)
	{
		vec3 samplePoint = origin + (stepSize * (0.5 + float(i))) * direction;
		float density = texture(volSmp, samplePoint).r;

		float collisionPropabillity = 1.0 - exp(-density*stepSize);

		float rng = random(gID + i + 1);
		//float transmittance = exp(-density);
		//if(transmittance < rng)
		if((collisionPropabillity /  maxCollisionPropabillity) > rng)
		{
			sampleMask |= 1 << i;
		}
		//sampleMask |= 1 << i;
	}
	entry.densityMask = sampleMask;

	pinDensityMask[gID] = entry;

}