#include "interface_structs.glsl"
layout(binding = LOCAL_BINDING_OFFSET) buffer PIN_GRID
{
	GLSLPinCacheEntry pin_grid[];
};

#include "../../../lib/lib/pt_common.glsl"
#include "pin_common.glsl"


layout(constant_id = LOCAL_SPEC_CONST_OFFSET) const float scPinWriteStepSize = 0.1;

struct PushStruct
{
	uint executionID;
};

layout(push_constant) uniform PC {PushStruct pc;};

bool generatePin(uint seed, out vec3 start, out vec3 end)
{
	vec3 direction = normalize(random3D(seed + 0x362123)-vec3(0.5));
	vec3 origin = 2.0*(random3D(seed + 0x491630))-vec3(0.5);
	return unitCubeIntersection(origin, direction, start, end);
}



void main()
{
	if(!validInvocation()) return;
	uint seed = invocationID() + invocationCount() * pc.executionID;

	uvec3 gID = gl_GlobalInvocationID;
	uint idx = gID.x;

	vec3 posMin, posMax;
	vec2 angleMin, angleMax;
	cell_range(idx, posMin, posMax, angleMin, angleMax);
	vec3 origin = mix(posMin, posMax, random3D(seed));
	vec2 angle = mix(angleMin, angleMax, random2D(seed));
	vec3 dir = sphericalToCartesian(angle);

	
	//origin = pin_pos(idx);//mix(posMin, posMax, random3D(seed));
	//dir = pin_dir(idx);//mix(angleMin, angleMax, random2D(seed));

	vec3 start, end;
	unitCubeIntersection(origin, dir, start, end);


	uint stepCount = PIN_MASK_SIZE * 32; // 32 bits per mask field
	float stepLength = distance(end,start) / float(stepCount);
	GLSLPinCacheEntry pin;
	resetMask(pin);
	float minTransmittance = 1.0;


	for(uint i = 0; i<stepCount; i++)
	{
		vec3 pos = start + dir * float(i) * stepLength;
		float transmittance = rayMarcheMediumTransmittance(pos, dir, stepLength, seed); // Must set volume resolution, and step size
		minTransmittance = min(minTransmittance, transmittance);
	}


	for(uint i = 0; i<stepCount; i++)
	{
		vec3 pos = start + dir * float(i) * stepLength;
		float transmittance = rayMarcheMediumTransmittance(pos, dir, stepLength, seed); // Must set volume resolution, and step size
		
		float p = (1.0 - transmittance)/(1.0 - minTransmittance);

		if(p > unormNext(seed))
		{
			writeToMask(stepCount - i, pin);
		}
	}


	pin.maxColProb = 1.0 - minTransmittance;
	pin.transmittancePos = rayMarcheMediumTransmittance(origin, dir, distance(origin, end), seed);
	pin.transmittanceNeg = rayMarcheMediumTransmittance(origin, -dir, distance(origin, start), seed);

	pin_grid[idx] = pin;
}


