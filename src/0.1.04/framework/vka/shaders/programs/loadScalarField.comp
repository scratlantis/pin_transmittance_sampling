#ifndef FORMAT
#define FORMAT r32f
#endif

#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_16bit_storage : require

#include "../lib/math.glsl"

layout(binding = 0) readonly buffer OUTPUT{ uint8_t buf[]; };
//layout(binding = 0) readonly buffer OUTPUT{ uint16_t buf[]; };
layout(binding = 1, FORMAT) writeonly uniform image3D img;

struct PushStruct
{
	float floatScale;
};
layout(push_constant) uniform PC {PushStruct pc;};

void main()
{
	if(!validInvocation()) return;
	uint index = invocationID();
	uint8_t value = buf[index];
	float scalarValue  = float(value) / 255.0;
	//uint16_t value = buf[index];
	//float scalarValue  = float(value) / (255.0 * 255.0);
	//if(value > 255* 128) scalarValue = 0;
	//if(value > 127) scalarValue = 0;
	scalarValue *= pc.floatScale;
	ivec3 gID = ivec3(gl_GlobalInvocationID);
	imageStore(img, gID, vec4(scalarValue));
}