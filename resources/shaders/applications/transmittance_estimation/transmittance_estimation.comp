#version 460
#extension GL_GOOGLE_include_directive : enable
#include "../../framework/simplex.glsl"

#define MAX_RAY_DISTANCE 10000.0
#define MIN_RAY_DISTANCE 0.1

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

struct PerFrameConstants
{
	vec4 camPos;

	mat4 viewMat;
	mat4 inverseViewMat;
	mat4 projectionMat;
	mat4 inverseProjectionMat;

	uint width;
	uint height;
	uint frameCounter;
	uint mousePosX;

	uint mousePosY;
	uint invertColors;
	uint placeholder3;
	uint placeholder4;
};

layout(binding = 0) uniform PFC {PerFrameConstants pfc;};
layout(binding = 1, rgba32f) uniform image2D imageOffscreen;


vec3 rayMarchSimplex(vec3 start, vec3 end, vec3 probePos)
{
	float emission = 1.f;
	const float stepSize = 10.0;
	vec3 rayDir = normalize(end-start);
	float rayLength = length(end-start);
	float d = 0;
	int cycleTime = 100000;
	float cycle = abs(int(pfc.frameCounter)%(2*cycleTime)-cycleTime);
	float time = 0.001f*cycle;
	time = 0.0;
	float distScale = 0.01;
	float emissionScale = 0.1;
	vec4 offset = vec4(432.34,391.3,942.1, 421.3);

	

	//return rayDir;

	for(float d = 0; d<rayLength; d+= stepSize)
	{
		vec3 pos = start + d*rayDir;
		//emission+=emissionScale*snoise(offset+vec4(distScale*pos, time));
		float probeDistance = length(probePos-pos);
		probeDistance+=0.0;
		float coef=probeDistance;
		float noise = clamp(0.0,1.0,0.01*coef);
		//float noise = clamp(0.0,1.0,0.01*probeDistance + snoise(offset+vec4(distScale*pos, time)));
		//noise = snoise(offset+vec4(distScale*pos, time));
		emission*=mix(0.40,1.0,noise);
	}
	return vec3(emission);
}



void main()
{
	uvec2 gID = gl_GlobalInvocationID.xy;
	if(gID.x >= pfc.width || gID.y >= pfc.height) return;
	ivec2 p = ivec2(gID);
	float scale = 0.001;
	float timeScale = 0.002;
	float noise = snoise(vec4(scale*gID.x, scale*gID.y, timeScale*pfc.frameCounter, 845.2121));
	vec3 noiseColor = vec3(noise);
	if(pfc.invertColors != 0)
	{
		noiseColor = 1.0 - noiseColor;
	}
	vec4 outColor = vec4(noiseColor, 1.0);




	const vec3  origin          = pfc.inverseViewMat[3].xyz;
    float tMin					= MIN_RAY_DISTANCE;
	float tMax					= MAX_RAY_DISTANCE;
    vec3 colorAccumulated		= vec3(0.0,0.0,0.0);

    /* box muller transform */
    vec2 pixel_offset	= vec2(0.0);
    pixel_offset.x		= min(sqrt(-2.0 * log(pixel_offset.x)), 0.9999999999999);
    pixel_offset		= pixel_offset - 0.5; 

    vec2 pixel_center   =   vec2(gID) + vec2(0.5);
    vec2 inUV           = (pixel_center+pixel_offset)/vec2(pfc.width, pfc.height);
    vec2 d              = inUV * 2.0 - 1.0;
    vec4 target         = pfc.inverseProjectionMat * vec4(d.x, d.y, 1, 1);
    vec3 direction      = (pfc.inverseViewMat * vec4(normalize(target.xyz), 0)).xyz;
	direction = normalize(direction);

	vec3 probePos = vec3(0.0,0.0,-100);

	vec3 fog = rayMarchSimplex(pfc.camPos.xyz, pfc.camPos.xyz + direction*300.0, probePos);
	//fog = testRay(pfc.camPos.xyz, pfc.camPos.xyz + direction*300.0);
	outColor.rgb = fog;
	//outColor.rgb = direction;
	imageStore(imageOffscreen, p, outColor);
}